#!/usr/bin/env python3
# encoding: utf-8
"""Command line interface for PyAR"""
import argparse
import os
import sys

import numpy as np

import pyar.scan
import pyar.tabu


def tabu_function():
    parser = argparse.ArgumentParser()
    parser.add_argument('-N', dest='number_of_trial_orientations', type=int,
                        required=True, metavar='n',
                        help='number of points/configurations')
    parser.add_argument('-i', type=str, nargs=2,
                        dest='file', help="two molecules, seed and monomer, "
                                          "in xyz file format")
    parser.add_argument('-tabu', choices=['y', 'n'],
                        default='y',
                        help="Toggle Tabu search")
    parser.add_argument('-grid', choices=['y', 'n'],
                        default='y',
                        help="Toggle grid")
    parser.add_argument('--charge', type=int, default=0,
                        help='charge')
    parser.add_argument('--distance-scaling', metavar='x.x',
                        default=1.0, type=float,
                        help='Scaling to decide how far the fragments '
                             'to be placed. sum_of_covalent_radii*x.x')
    parser.add_argument('--plot', action='store_true',
                        help='generate random points on the surface of a unit '
                             'sphere')
    task_group = parser.add_mutually_exclusive_group(required=False)

    task_group.add_argument('-best', type=int, nargs=2,
                            help="create the best orientation with lowest a b "
                                 "distance")
    task_group.add_argument('--make-configurations', action='store_true',
                            help='generate number_of_trial_orientations configurations of two molecules')
    task_group.add_argument('--make-composite', action='store_true',
                            help='generate a composite molecule with seed and number_of_trial_orientations '
                                 'monomers')
    task_group.add_argument('-make-sphere', type=str,
                            help="create a molecules from number_of_trial_orientations atoms of given elements")

    args = parser.parse_args()
    print("These are the arguments\n", args)

    number_of_trial_orientations = args.number_of_trial_orientations

    d_scale = args.distance_scaling
    print("distance scale = ", d_scale, "; files ", args.file)
    if args.file:
        from pyar.Molecule import Molecule
        seed = Molecule.from_xyz(args.file[0])
        monomer = Molecule.from_xyz(args.file[1])
    else:
        seed = None
        monomer = None

    tabu_on = args.tabu == 'y:'
    grid_on = False
    pts = pyar.tabu.generate_points(number_of_trial_orientations,
                                    tabu_on, grid_on, False)
    if args.plot:
        pyar.tabu.plot_points(pts, os.getcwd())

    if args.make_configurations:
        if not (seed or monomer):
            print(parser.print_help())
            print("Note: provide two molecules, '-i file1.xyz file2.xyz'")
            sys.exit()
        for i, vector in enumerate(pts):
            each_orientation = pyar.tabu.merge_two_molecules(vector, seed, monomer, site=None, distance_scaling=d_scale)
            each_orientation.mol_to_xyz(f'mol_{i:03d}.xyz')

    if args.make_composite:
        for i in range(8):
            pts = pyar.tabu.generate_points(number_of_trial_orientations, tabu_on=True, grid_on=True, check_angle=False)
            result = pyar.tabu.create_composite_molecule(seed, monomer,
                                                         pts, d_scale=d_scale)
            result.title = f"trial_{i:03d}"
            result.mol_to_xyz(f'result_{i:03}.xyz')

    if args.make_sphere:
        import scipy.spatial.distance as sdist

        from pyar.Molecule import Molecule
        from pyar.data.atomic_data import atomic_numbers, covalent_radii
        radii = covalent_radii[atomic_numbers[args.make_sphere.capitalize()]]
        points = pyar.tabu.distribute_points_uniformly(pts)
        factor = pts / 10
        while np.min(sdist.pdist(points)) < 2 * radii:
            pts += factor

        atoms = [args.make_sphere for _
                 in range(number_of_trial_orientations)]
        result = Molecule(atoms, pts)

        result.mol_to_xyz('mol.xyz')

    if args.best:
        a = args.best[0]
        b = seed.number_of_atoms + args.best[1]
        pyar.scan.generate_guess_for_bonding('xxx', seed, monomer, a, b, number_of_trial_orientations,
                                             d_scale=d_scale)


if __name__ == "__main__":
    tabu_function()
